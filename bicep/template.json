{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.29.47.4906",
      "templateHash": "7530231314352038040"
    }
  },
  "parameters": {
    "appName": {
      "type": "string"
    },
    "graphChangeTrackingSpId": {
      "type": "string"
    },
    "userId": {
      "type": "string"
    },
    "apiClientId": {
      "type": "string"
    },
    "apiClientSecret": {
      "type": "securestring"
    },
    "corsUrls": {
      "type": "array"
    },
    "certificateName": {
      "type": "string",
      "defaultValue": "contoso"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('dp{0}-redis', parameters('appName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('appName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "8771783209766201119"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Cache/redis",
              "apiVersion": "2022-06-01",
              "name": "[format('{0}redis', parameters('name'))]",
              "location": "[resourceGroup().location]",
              "properties": {
                "enableNonSslPort": false,
                "publicNetworkAccess": "Enabled",
                "redisConfiguration": {
                  "maxfragmentationmemory-reserved": "30",
                  "maxmemory-delta": "30",
                  "maxmemory-reserved": "30"
                },
                "redisVersion": "6.0",
                "sku": {
                  "capacity": 0,
                  "family": "C",
                  "name": "Basic"
                }
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('dp{0}-uai', parameters('appName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('appName')]"
          },
          "graphSpId": {
            "value": "[parameters('graphChangeTrackingSpId')]"
          },
          "userId": {
            "value": "[parameters('userId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "2256637762709891473"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "graphSpId": {
              "type": "string"
            },
            "userId": {
              "type": "string",
              "metadata": {
                "description": "Specifies the object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies. Get it by using Get-AzADUser or Get-AzADServicePrincipal cmdlets."
              }
            }
          },
          "variables": {
            "keyVaultSecretsUserRoleId": "4633458b-17de-408a-b874-0445c86b69e6",
            "keyVaultAdminRoleId": "00482a5a-887f-4fb3-b363-3b7fe8e74483",
            "keyVaultCertificateOfficerRoleId": "a4417e6f-fecd-4de8-b567-7b0420556985"
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2022-01-31-preview",
              "name": "[toLower(format('{0}-uai', parameters('name')))]",
              "location": "[resourceGroup().location]"
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, variables('keyVaultSecretsUserRoleId'), toLower(format('{0}-uai', parameters('name'))))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', toLower(format('{0}-uai', parameters('name')))), '2022-01-31-preview').principalId]",
                "roleDefinitionId": "[format('{0}/providers/Microsoft.Authorization/roleDefinitions/{1}', subscription().id, variables('keyVaultSecretsUserRoleId'))]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', toLower(format('{0}-uai', parameters('name'))))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, variables('keyVaultCertificateOfficerRoleId'), toLower(format('{0}-uai', parameters('name'))))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', toLower(format('{0}-uai', parameters('name')))), '2022-01-31-preview').principalId]",
                "roleDefinitionId": "[format('{0}/providers/Microsoft.Authorization/roleDefinitions/{1}', subscription().id, variables('keyVaultCertificateOfficerRoleId'))]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', toLower(format('{0}-uai', parameters('name'))))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, variables('keyVaultSecretsUserRoleId'), parameters('graphSpId'))]",
              "properties": {
                "principalId": "[parameters('graphSpId')]",
                "roleDefinitionId": "[format('{0}/providers/Microsoft.Authorization/roleDefinitions/{1}', subscription().id, variables('keyVaultSecretsUserRoleId'))]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, variables('keyVaultAdminRoleId'), parameters('userId'))]",
              "properties": {
                "principalId": "[parameters('userId')]",
                "roleDefinitionId": "[format('{0}/providers/Microsoft.Authorization/roleDefinitions/{1}', subscription().id, variables('keyVaultAdminRoleId'))]"
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('dp{0}-evh', parameters('appName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('appName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "959739007922097384"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "eventHubSku": {
              "type": "string",
              "defaultValue": "Basic",
              "allowedValues": [
                "Basic",
                "Standard"
              ],
              "metadata": {
                "description": "Specifies the messaging tier for Event Hub Namespace."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.EventHub/namespaces",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}ns', parameters('name'))]",
              "location": "[resourceGroup().location]",
              "sku": {
                "name": "[parameters('eventHubSku')]",
                "tier": "[parameters('eventHubSku')]",
                "capacity": 1
              },
              "properties": {
                "isAutoInflateEnabled": false,
                "maximumThroughputUnits": 0
              }
            },
            {
              "type": "Microsoft.EventHub/namespaces/eventhubs",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}/{1}', format('{0}ns', parameters('name')), format('{0}hub', parameters('name')))]",
              "properties": {
                "messageRetentionInDays": 1,
                "partitionCount": 1
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', format('{0}ns', parameters('name')))]"
              ]
            },
            {
              "type": "Microsoft.EventHub/namespaces/eventhubs/authorizationRules",
              "apiVersion": "2021-01-01-preview",
              "name": "[format('{0}/{1}/{2}', format('{0}ns', parameters('name')), format('{0}hub', parameters('name')), 'sendpolicy')]",
              "properties": {
                "rights": [
                  "Send"
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', format('{0}ns', parameters('name')), format('{0}hub', parameters('name')))]"
              ]
            },
            {
              "type": "Microsoft.EventHub/namespaces/eventhubs/authorizationRules",
              "apiVersion": "2021-01-01-preview",
              "name": "[format('{0}/{1}/{2}', format('{0}ns', parameters('name')), format('{0}hub', parameters('name')), 'listenpolicy')]",
              "properties": {
                "rights": [
                  "Listen"
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', format('{0}ns', parameters('name')), format('{0}hub', parameters('name')))]",
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', format('{0}ns', parameters('name')), format('{0}hub', parameters('name')), 'sendpolicy')]"
              ]
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('dp{0}-AppInsights', parameters('appName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('appName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "11820961430126248088"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[format('{0}-ai', parameters('name'))]",
              "location": "[resourceGroup().location]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled"
              }
            }
          ],
          "outputs": {
            "applicationInsights": {
              "type": "object",
              "value": "[reference(resourceId('Microsoft.Insights/components', format('{0}-ai', parameters('name'))), '2020-02-02', 'full')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('dp{0}-StorageAccount', parameters('appName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('appName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "13445278991807471906"
            }
          },
          "parameters": {
            "storageAccountType": {
              "type": "string",
              "defaultValue": "Standard_LRS",
              "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS"
              ],
              "metadata": {
                "description": "Storage Account type"
              }
            },
            "name": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-08-01",
              "name": "[toLower(format('{0}sa', parameters('name')))]",
              "location": "[resourceGroup().location]",
              "sku": {
                "name": "[parameters('storageAccountType')]"
              },
              "kind": "StorageV2"
            }
          ],
          "outputs": {
            "storageAccount": {
              "type": "object",
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', toLower(format('{0}sa', parameters('name')))), '2021-08-01', 'full')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('dp{0}-SignalR', parameters('appName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('appName')]"
          },
          "apiClientId": {
            "value": "[parameters('apiClientId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "17369610167266209039"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "apiClientId": {
              "type": "string"
            },
            "pricingTier": {
              "type": "string",
              "defaultValue": "Free_F1",
              "allowedValues": [
                "Free_F1",
                "Standard_S1",
                "Premium_P1"
              ],
              "metadata": {
                "description": "The pricing tier of the SignalR resource."
              }
            },
            "capacity": {
              "type": "int",
              "defaultValue": 1,
              "allowedValues": [
                1,
                2,
                5,
                10,
                20,
                50,
                100
              ],
              "metadata": {
                "description": "The number of SignalR Unit."
              }
            },
            "serviceMode": {
              "type": "string",
              "defaultValue": "Serverless",
              "allowedValues": [
                "Default",
                "Serverless",
                "Classic"
              ],
              "metadata": {
                "description": "Visit https://github.com/Azure/azure-signalr/blob/dev/docs/faq.md#service-mode to understand SignalR Service Mode."
              }
            },
            "enableConnectivityLogs": {
              "type": "bool",
              "defaultValue": true
            },
            "enableMessagingLogs": {
              "type": "bool",
              "defaultValue": true
            },
            "enableLiveTrace": {
              "type": "bool",
              "defaultValue": true
            }
          },
          "resources": [
            {
              "type": "Microsoft.SignalRService/signalR",
              "apiVersion": "2022-02-01",
              "name": "[format('{0}signalr', parameters('name'))]",
              "location": "[resourceGroup().location]",
              "sku": {
                "capacity": "[parameters('capacity')]",
                "name": "[parameters('pricingTier')]"
              },
              "kind": "SignalR",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "tls": {
                  "clientCertEnabled": false
                },
                "features": [
                  {
                    "flag": "ServiceMode",
                    "value": "[parameters('serviceMode')]"
                  },
                  {
                    "flag": "EnableConnectivityLogs",
                    "value": "[string(parameters('enableConnectivityLogs'))]"
                  },
                  {
                    "flag": "EnableMessagingLogs",
                    "value": "[string(parameters('enableMessagingLogs'))]"
                  },
                  {
                    "flag": "EnableLiveTrace",
                    "value": "[string(parameters('enableLiveTrace'))]"
                  }
                ],
                "liveTraceConfiguration": {
                  "categories": [
                    {
                      "enabled": "true",
                      "name": "ConnectivityLogs"
                    },
                    {
                      "enabled": "true",
                      "name": "MessagingLogs"
                    },
                    {
                      "enabled": "true",
                      "name": "HttpRequestLogs"
                    }
                  ],
                  "enabled": "true"
                }
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('dp{0}-kv', parameters('appName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('appName')]"
          },
          "userId": {
            "value": "[parameters('userId')]"
          },
          "apiClientId": {
            "value": "[parameters('apiClientId')]"
          },
          "apiClientSecret": {
            "value": "[parameters('apiClientSecret')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "7013828198711979827"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "apiClientId": {
              "type": "string"
            },
            "apiClientSecret": {
              "type": "securestring"
            },
            "userId": {
              "type": "string",
              "metadata": {
                "description": "Specifies the object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies. Get it by using Get-AzADUser or Get-AzADServicePrincipal cmdlets."
              }
            },
            "enabledForDeployment": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
              }
            },
            "enabledForDiskEncryption": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
              }
            },
            "enabledForTemplateDeployment": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
              }
            },
            "tenantId": {
              "type": "string",
              "defaultValue": "[subscription().tenantId]",
              "metadata": {
                "description": "Specifies the Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Get it by using Get-AzSubscription cmdlet."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "standard",
              "allowedValues": [
                "standard",
                "premium"
              ],
              "metadata": {
                "description": "Specifies whether the key vault is a standard vault or a premium vault."
              }
            }
          },
          "variables": {
            "keyVaultName": "[format('{0}kv', parameters('name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.EventHub/namespaces",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}ns', parameters('name'))]",
              "location": "[resourceGroup().location]"
            },
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2021-11-01-preview",
              "name": "[variables('keyVaultName')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "enabledForDeployment": "[parameters('enabledForDeployment')]",
                "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
                "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
                "tenantId": "[parameters('tenantId')]",
                "enableRbacAuthorization": true,
                "sku": {
                  "name": "[parameters('skuName')]",
                  "family": "A"
                },
                "networkAcls": {
                  "defaultAction": "Allow",
                  "bypass": "AzureServices"
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', variables('keyVaultName'), 'GraphEventHubSendConnectionString')]",
              "properties": {
                "value": "[listKeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', format('{0}ns', parameters('name')), format('{0}hub', parameters('name')), 'sendpolicy'), '2021-01-01-preview').primaryConnectionString]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', format('{0}ns', parameters('name')))]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', variables('keyVaultName'), 'AzureSignalRConnectionString')]",
              "properties": {
                "value": "[listKeys(resourceId('Microsoft.SignalRService/signalR', format('{0}signalr', parameters('name'))), '2022-02-01').primaryConnectionString]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', variables('keyVaultName'), 'ClientId')]",
              "properties": {
                "value": "[parameters('apiClientId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', variables('keyVaultName'), 'ClientSecret')]",
              "properties": {
                "value": "[parameters('apiClientSecret')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', variables('keyVaultName'), 'EventHubListenConnectionString')]",
              "properties": {
                "value": "[listKeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', format('{0}ns', parameters('name')), format('{0}hub', parameters('name')), 'listenpolicy'), '2021-01-01-preview').primaryConnectionString]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', format('{0}ns', parameters('name')))]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', variables('keyVaultName'), 'RedisConnectionString')]",
              "properties": {
                "value": "[format('{0}.redis.cache.windows.net:6380,password={1},ssl=True,abortConnect=False', format('{0}redis', parameters('name')), listKeys(resourceId('Microsoft.Cache/redis', format('{0}redis', parameters('name'))), '2022-06-01').primaryKey)]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-evh', parameters('appName')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-redis', parameters('appName')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-SignalR', parameters('appName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('dp-createCert-{0}', parameters('appName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "userAssignedIdentityName": {
            "value": "[toLower(format('{0}-uai', parameters('appName')))]"
          },
          "VaultName": {
            "value": "[format('{0}kv', parameters('appName'))]"
          },
          "CertName": {
            "value": "[parameters('certificateName')]"
          },
          "Force": {
            "value": false
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "9630267235056648208"
            }
          },
          "parameters": {
            "VaultName": {
              "type": "string"
            },
            "CertName": {
              "type": "string",
              "defaultValue": "contoso"
            },
            "SubjectName": {
              "type": "string",
              "defaultValue": "CN=contoso.com"
            },
            "DnsNames": {
              "type": "array",
              "defaultValue": [
                "contoso.com"
              ]
            },
            "Force": {
              "type": "bool",
              "defaultValue": false
            },
            "userAssignedIdentityName": {
              "type": "string"
            },
            "now": {
              "type": "string",
              "defaultValue": "[utcNow('F')]"
            }
          },
          "variables": {
            "$fxv#0": "param (\n    [string]$IssuerName = 'self',\n    [string]$VaultName,\n    [string]$CertName = 'contoso',\n    [string]$SubjectName = 'CN=contoso.com',\n    [string]$DnsNames,\n    [int]$ValidityInMonths = 12,\n    [int]$RenewAtPercentageLifetime = 24,\n    [string]$SecretContentType = 'application/x-pkcs12',\n    [switch]$Disabled,\n    [bool]$Force\n)\ntry\n{\n    Write-Output \"`nUTC is: $(Get-Date)\"\n    $c = Get-AzContext -ErrorAction stop\n    if ($c)\n    {\n        Write-Output \"`nContext is: \"\n        $c | Select-Object Account, Subscription, Tenant, Environment | Format-List | Out-String\n        $DNSNamesArray = $DnsNames -split '_'\n        Write-Output $DNSNamesArray\n        $PolicyParams = @{\n            RenewAtPercentageLifetime = $RenewAtPercentageLifetime\n            SecretContentType         = $SecretContentType\n            ValidityInMonths          = $ValidityInMonths\n            IssuerName                = $IssuerName\n            DnsNames                  = $DNSNamesArray\n            Disabled                  = $Disabled\n            SubjectName               = $SubjectName\n        }\n        $Cert = Get-AzKeyVaultCertificate -VaultName $VaultName -Name $CertName\n        If ($Cert)\n        {\n            $Policy = $Cert | Get-AzKeyVaultCertificatePolicy | Where-Object SubjectName -EQ $SubjectName\n        }\n        if ($Policy)\n        {\n            Write-Warning -Message \"Policy exists      [$($policy.SubjectName)]\"\n            if ($Force)\n            {\n                Write-Warning -Message \"Force Policy [$($policy.SubjectName)] settings\"\n                $Policy = New-AzKeyVaultCertificatePolicy @PolicyParams\n            }\n        }\n        else\n        {\n            Write-Warning -Message \"Creating Policy [$SubjectName]\"\n            $Policy = New-AzKeyVaultCertificatePolicy @PolicyParams\n        }\n        if ($Cert -and (-not $Force))\n        {\n            Write-Warning -Message \"Certificate exists [$($Cert.Name)]\"\n        }\n        else\n        {\n            Write-Warning -Message \"Creating Certificate [$CertName]\"\n            $Result = Add-AzKeyVaultCertificate -VaultName $VaultName -Name $CertName -CertificatePolicy $Policy\n            $Result.StatusDetails\n            while ($New.Enabled -ne $true)\n            {\n                $New = Get-AzKeyVaultCertificate -VaultName $VaultName -Name $CertName\n                Start-Sleep -Seconds 30\n            }\n        }\n        $out = $cert ?? $new\n        $DeploymentScriptOutputs = @{}\n        $DeploymentScriptOutputs['VaultName'] = $VaultName\n        $DeploymentScriptOutputs['CertName'] = $out.Name\n        $DeploymentScriptOutputs['Thumbprint'] = $out.Thumbprint\n        $DeploymentScriptOutputs['CertEnabled'] = $out.Enabled\n        $DeploymentScriptOutputs['RenewAtPercentageLifetime'] = $Policy.RenewAtPercentageLifetime\n        $DeploymentScriptOutputs['ValidityInMonths'] = $Policy.ValidityInMonths\n        $DeploymentScriptOutputs['SubjectName'] = $Policy.SubjectName\n        $DeploymentScriptOutputs['DnsNames'] = $Policy.DnsNames\n    }\n    else\n    {\n        throw 'Cannot get a context'\n    }\n}\ncatch\n{\n    Write-Warning $_\n    Write-Warning $_.exception\n}",
            "boolstring": "[if(equals(parameters('Force'), false()), '$false', '$true')]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "[format('newCert-{0}', parameters('CertName'))]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')))]": {}
                }
              },
              "location": "[resourceGroup().location]",
              "kind": "AzurePowerShell",
              "properties": {
                "azPowerShellVersion": "9.0.0",
                "arguments": "[format(' -VaultName {0} -CertName {1} -SubjectName {2} -Force {3} -DnsNames {4}', parameters('VaultName'), parameters('CertName'), parameters('SubjectName'), variables('boolstring'), join(parameters('DnsNames'), '_'))]",
                "scriptContent": "[variables('$fxv#0')]",
                "forceUpdateTag": "[parameters('now')]",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D",
                "timeout": "PT8M"
              }
            }
          ],
          "outputs": {
            "VaultNameOut": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', format('newCert-{0}', parameters('CertName'))), '2020-10-01').outputs.VaultName]"
            },
            "CertNameOut": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', format('newCert-{0}', parameters('CertName'))), '2020-10-01').outputs.CertName]"
            },
            "ThumbprintOut": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', format('newCert-{0}', parameters('CertName'))), '2020-10-01').outputs.Thumbprint]"
            },
            "CertEnabledOut": {
              "type": "bool",
              "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', format('newCert-{0}', parameters('CertName'))), '2020-10-01').outputs.CertEnabled]"
            },
            "RenewAtPercentageLifetime": {
              "type": "int",
              "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', format('newCert-{0}', parameters('CertName'))), '2020-10-01').outputs.RenewAtPercentageLifetime]"
            },
            "ValidityInMonthsOut": {
              "type": "int",
              "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', format('newCert-{0}', parameters('CertName'))), '2020-10-01').outputs.ValidityInMonths]"
            },
            "SubjectNameOut": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', format('newCert-{0}', parameters('CertName'))), '2020-10-01').outputs.SubjectName]"
            },
            "DnsNamesOut": {
              "type": "array",
              "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', format('newCert-{0}', parameters('CertName'))), '2020-10-01').outputs.DnsNames]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-kv', parameters('appName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('dp{0}-FunctionApp', parameters('appName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('appName')]"
          },
          "certificateName": {
            "value": "[parameters('certificateName')]"
          },
          "allowedOrigins": {
            "value": "[parameters('corsUrls')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "4575045590577233408"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the function app that you wish to create."
              }
            },
            "certificateName": {
              "type": "string"
            },
            "runtime": {
              "type": "string",
              "defaultValue": "dotnet",
              "allowedValues": [
                "node",
                "dotnet",
                "java"
              ],
              "metadata": {
                "description": "The language worker runtime to load in the function app."
              }
            },
            "allowedOrigins": {
              "type": "array"
            }
          },
          "variables": {
            "functionWorkerRuntime": "[parameters('runtime')]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2022-03-01",
              "name": "[format('{0}-hosting', parameters('name'))]",
              "location": "[resourceGroup().location]",
              "sku": {
                "name": "Y1",
                "tier": "Dynamic"
              },
              "properties": {}
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2022-03-01",
              "name": "[toLower(format('{0}func', parameters('name')))]",
              "location": "[resourceGroup().location]",
              "kind": "functionapp",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', toLower(format('{0}-uai', parameters('name')))))]": {}
                }
              },
              "properties": {
                "keyVaultReferenceIdentity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', toLower(format('{0}-uai', parameters('name'))))]",
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format('{0}-hosting', parameters('name')))]",
                "siteConfig": {
                  "cors": {
                    "allowedOrigins": "[parameters('allowedOrigins')]",
                    "supportCredentials": true
                  },
                  "appSettings": [
                    {
                      "name": "AzureWebJobsStorage",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', toLower(format('{0}sa', parameters('name'))), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', toLower(format('{0}sa', parameters('name')))), '2021-08-01').keys[0].value)]"
                    },
                    {
                      "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', toLower(format('{0}sa', parameters('name'))), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', toLower(format('{0}sa', parameters('name')))), '2021-08-01').keys[0].value)]"
                    },
                    {
                      "name": "WEBSITE_CONTENTSHARE",
                      "value": "[toLower(parameters('name'))]"
                    },
                    {
                      "name": "FUNCTIONS_EXTENSION_VERSION",
                      "value": "~4"
                    },
                    {
                      "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                      "value": "[reference(resourceId('Microsoft.Insights/components', format('{0}-ai', parameters('name'))), '2020-02-02').InstrumentationKey]"
                    },
                    {
                      "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                      "value": "[reference(resourceId('Microsoft.Insights/components', format('{0}-ai', parameters('name'))), '2020-02-02').ConnectionString]"
                    },
                    {
                      "name": "FUNCTIONS_WORKER_RUNTIME",
                      "value": "[variables('functionWorkerRuntime')]"
                    },
                    {
                      "name": "AzureSignalRConnectionString",
                      "value": "[format('@Microsoft.KeyVault(VaultName={0}kv;SecretName=AzureSignalRConnectionString)', parameters('name'))]"
                    },
                    {
                      "name": "AppSettings:TenantId",
                      "value": "common"
                    },
                    {
                      "name": "AppSettings:NotificationUrl",
                      "value": "[format('EventHub:https://{0}kv.vault.azure.net/secrets/GraphEventHubSendConnectionString?tenantId={1}', parameters('name'), subscription().tenantId)]"
                    },
                    {
                      "name": "AppSettings:ClientId",
                      "value": "[format('@Microsoft.KeyVault(VaultName={0}kv;SecretName=ClientId)', parameters('name'))]"
                    },
                    {
                      "name": "AppSettings:ClientSecret",
                      "value": "[format('@Microsoft.KeyVault(VaultName={0}kv;SecretName=ClientSecret)', parameters('name'))]"
                    },
                    {
                      "name": "AppSettings:KeyVaultUrl",
                      "value": "[format('https://{0}kv.vault.azure.net', parameters('name'))]"
                    },
                    {
                      "name": "AppSettings:CertificateName",
                      "value": "[parameters('certificateName')]"
                    },
                    {
                      "name": "AppSettings:EventHubName",
                      "value": "[format('{0}hub', parameters('name'))]"
                    },
                    {
                      "name": "AppSettings:EventHubListenConnectionString",
                      "value": "[format('@Microsoft.KeyVault(VaultName={0}kv;SecretName=EventHubListenConnectionString)', parameters('name'))]"
                    },
                    {
                      "name": "AppSettings:UserAssignedClientId",
                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', toLower(format('{0}-uai', parameters('name')))), '2022-01-31-preview').clientId]"
                    },
                    {
                      "name": "AppSettings:RedisConnectionString",
                      "value": "[format('@Microsoft.KeyVault(VaultName={0}kv;SecretName=RedisConnectionString)', parameters('name'))]"
                    },
                    {
                      "name": "WEBSITE_LOAD_USER_PROFILE",
                      "value": "1"
                    }
                  ],
                  "ftpsState": "FtpsOnly",
                  "minTlsVersion": "1.2"
                },
                "httpsOnly": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', format('{0}-hosting', parameters('name')))]"
              ]
            }
          ],
          "outputs": {
            "hostname": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', toLower(format('{0}func', parameters('name')))), '2022-03-01').defaultHostName]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-AppInsights', parameters('appName')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-kv', parameters('appName')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-StorageAccount', parameters('appName')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-uai', parameters('appName')))]"
      ]
    }
  ]
}